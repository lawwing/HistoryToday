package cn.lawwing.historytoday.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_INFO_DB".
*/
public class HistoryInfoDbDao extends AbstractDao<HistoryInfoDb, Long> {

    public static final String TABLENAME = "HISTORY_INFO_DB";

    /**
     * Properties of entity HistoryInfoDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Historyid = new Property(1, String.class, "historyid", false, "HISTORYID");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Month = new Property(3, int.class, "month", false, "MONTH");
        public final static Property Day = new Property(4, int.class, "day", false, "DAY");
        public final static Property Event = new Property(5, String.class, "event", false, "EVENT");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
    };


    public HistoryInfoDbDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryInfoDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_INFO_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"HISTORYID\" TEXT," + // 1: historyid
                "\"DATE\" TEXT," + // 2: date
                "\"MONTH\" INTEGER NOT NULL ," + // 3: month
                "\"DAY\" INTEGER NOT NULL ," + // 4: day
                "\"EVENT\" TEXT," + // 5: event
                "\"TITLE\" TEXT);"); // 6: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_INFO_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryInfoDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String historyid = entity.getHistoryid();
        if (historyid != null) {
            stmt.bindString(2, historyid);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
        stmt.bindLong(4, entity.getMonth());
        stmt.bindLong(5, entity.getDay());
 
        String event = entity.getEvent();
        if (event != null) {
            stmt.bindString(6, event);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryInfoDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String historyid = entity.getHistoryid();
        if (historyid != null) {
            stmt.bindString(2, historyid);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
        stmt.bindLong(4, entity.getMonth());
        stmt.bindLong(5, entity.getDay());
 
        String event = entity.getEvent();
        if (event != null) {
            stmt.bindString(6, event);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryInfoDb readEntity(Cursor cursor, int offset) {
        HistoryInfoDb entity = new HistoryInfoDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // historyid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.getInt(offset + 3), // month
            cursor.getInt(offset + 4), // day
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // event
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryInfoDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHistoryid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMonth(cursor.getInt(offset + 3));
        entity.setDay(cursor.getInt(offset + 4));
        entity.setEvent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryInfoDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryInfoDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
